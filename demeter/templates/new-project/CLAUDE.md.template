# Claude.md - AI Development Guide for {{PROJECT_NAME}}

> **SSOT-Driven Development** with GraphRAG and Contract Engineering
> Generated by Demeter WAVIS v3.0.0

## üéØ Project Overview
- **Name**: {{PROJECT_NAME}}
- **Description**: {{PROJECT_DESCRIPTION}}
- **Technology Stack**: {{TECH_STACK}}
- **Architecture**: SSOT-driven with AI assistance
- **Framework**: Demeter WAVIS v3.0.0

## üìä Single Source of Truth (SSOT)
All development follows the SSOT defined in:
- **Primary**: `demeter/core/ssot/framework-requirements.yaml`
- **GraphRAG Index**: `demeter/core/ssot/graphrag/index/`
- **Contracts**: `demeter/core/ssot/contracts/`

## ü§ñ AI-Driven Development Workflow

### 1. Requirements Query
**Always start with SSOT query before any development:**
```
/ssot-query [feature or requirement]
```
**Examples:**
- `/ssot-query authentication` - Find auth requirements
- `/ssot-query FR-001` - Get specific functional requirement
- `/ssot-query UoW-101` - Get implementation details

### 2. Implementation Generation
**Generate code directly from SSOT:**
```
/generate-implementation [UoW-ID] [options]
```
**Examples:**
- `/generate-implementation UoW-001 --with-tests`
- `/generate-implementation UoW-101 --with-contracts`

### 3. Contract Validation
**Verify implementation compliance:**
```
/verify-contracts [UoW-ID or --all]
```

### 4. System Verification
**Check overall system health:**
```bash
./scripts/quick-sync-check.sh
./scripts/full-verification.sh
```

## üîÑ Development Cycle

### Phase 1: Requirements Analysis
1. **Query SSOT**: Use `/ssot-query` to find relevant FR/NFR/UoW
2. **Understand Context**: Review acceptance criteria and contracts
3. **Check Dependencies**: Identify related UoWs and requirements
4. **Assess Impact**: Use impact analysis if modifying existing code

### Phase 2: Design & Planning
1. **Review Contracts**: Check existing contracts for the UoW
2. **Plan Implementation**: Define code structure and approach
3. **Test Strategy**: Plan tests mapped to acceptance criteria
4. **Technical Decisions**: Document in ADR if architectural

### Phase 3: Implementation
1. **Generate Code**: Use `/generate-implementation` with SSOT context
2. **TDD Approach**: Write tests first, mapped to AC
3. **Follow Standards**: Adhere to project coding conventions
4. **Contract Compliance**: Ensure pre/post conditions are met

### Phase 4: Validation
1. **Contract Verification**: Run `/verify-contracts`
2. **Test Execution**: All tests must pass
3. **SSOT Consistency**: Verify system integrity
4. **Performance Check**: Meet NFR requirements

### Phase 5: Integration
1. **System Verification**: Run full verification script
2. **GraphRAG Update**: Knowledge automatically accumulated
3. **Documentation**: Update as needed
4. **Quality Gates**: All gates must pass

## üìã AI Command Reference

### Core Commands
| Command | Purpose | Example |
|---------|---------|---------|
| `/ssot-query` | Query requirements | `/ssot-query authentication` |
| `/generate-implementation` | Generate code | `/generate-implementation UoW-001` |
| `/verify-contracts` | Validate contracts | `/verify-contracts --all` |

### Query Patterns
- **By keyword**: `/ssot-query [keyword]`
- **By ID**: `/ssot-query FR-001` or `/ssot-query UoW-101`
- **By category**: `/ssot-query security` or `/ssot-query performance`
- **Find gaps**: `/ssot-query gaps`

### Implementation Options
- **With tests**: `--with-tests`
- **With contracts**: `--with-contracts`
- **Specific tech**: `--tech-stack {{TECH_STACK}}`
- **Dry run**: `--dry-run`

## üèóÔ∏è Code Quality Standards

### Contract-Driven Development
All implementations must:
- ‚úÖ Satisfy preconditions (input validation)
- ‚úÖ Guarantee postconditions (output validation)
- ‚úÖ Maintain invariants (system consistency)
- ‚úÖ Meet performance contracts
- ‚úÖ Enforce security constraints

### Test Requirements
- **Coverage**: >80% for foundation, >60% for business logic
- **AC Mapping**: Each test maps to acceptance criteria
- **TDD**: Tests written before implementation
- **Categories**: Unit, integration, contract validation

### Documentation Standards
- **SSOT Reference**: Include FR/NFR/UoW IDs in code
- **Contract Compliance**: Document how contracts are satisfied
- **Error Handling**: Comprehensive error scenarios
- **Performance**: Document performance characteristics

## üõ†Ô∏è Technology-Specific Guidelines

{{#if TECH_STACK}}
### {{TECH_STACK}} Standards
{{#switch TECH_STACK}}
{{#case "python-fastapi"}}
- **Framework**: FastAPI with Pydantic models
- **Testing**: pytest with async support
- **Linting**: black, flake8, mypy
- **Dependencies**: requirements.txt with pinned versions
{{/case}}
{{#case "typescript-nextjs"}}
- **Framework**: Next.js 14+ with TypeScript
- **Testing**: Jest with React Testing Library
- **Linting**: ESLint with TypeScript rules
- **Build**: Next.js build system
{{/case}}
{{#case "go-gin"}}
- **Framework**: Gin web framework
- **Testing**: Go testing package with testify
- **Linting**: golangci-lint
- **Dependencies**: Go modules
{{/case}}
{{#default}}
- Follow language/framework best practices
- Maintain consistent code style
- Use appropriate testing frameworks
- Follow dependency management conventions
{{/default}}
{{/switch}}
{{/if}}

## üìä Quality Gates

### Pre-Commit Checks
- [ ] SSOT query executed for context
- [ ] Implementation generated from SSOT
- [ ] All acceptance criteria addressed
- [ ] Contract validation passes
- [ ] Tests written and passing
- [ ] Code follows standards

### Pre-Merge Checks
- [ ] Full SSOT verification passes (>95%)
- [ ] All contracts validated
- [ ] Performance requirements met
- [ ] Security constraints enforced
- [ ] Documentation updated
- [ ] GraphRAG knowledge updated

## üîß Development Tools

### Verification Scripts
```bash
# Quick health check
./scripts/quick-sync-check.sh

# Full system verification
./scripts/full-verification.sh

# Setup git hooks
./scripts/setup-hooks.sh
```

### Monitoring & Debugging
```bash
# Start GraphRAG dashboard
python3 demeter/dashboard/app.py

# Query system health
python3 demeter/core/ssot/graphrag/query/ssot-query.py --gaps

# Impact analysis
python3 demeter/core/ssot/graphrag/query/impact-analyzer.py --entity [ID]
```

### Manual SSOT Operations
```bash
# SSOT verification
python3 demeter/core/ssot/verification/verify-ssot.py

# Generate traceability matrix
python3 demeter/core/ssot/traceability/matrix-generator.py

# GraphRAG synchronization
python3 demeter/core/ssot/graphrag/sync/sync-engine.py
```

## üö® Troubleshooting

### SSOT Issues
1. **Verification Fails**: Check `ssot-verification.html` for details
2. **Reference Errors**: Ensure all FR/NFR/UoW IDs are valid
3. **Consistency Issues**: Run full verification and fix identified problems

### Contract Violations
1. **Precondition Failures**: Add proper input validation
2. **Postcondition Issues**: Ensure outputs meet guarantees
3. **Performance Problems**: Optimize or adjust contracts
4. **Security Violations**: Implement required security measures

### AI Generation Issues
1. **Context Missing**: Ensure SSOT is properly indexed
2. **Generation Fails**: Check prompt templates and SSOT data
3. **Quality Issues**: Verify SSOT quality and completeness

## üéØ Success Criteria

### Project Completion
- ‚úÖ All UoWs implemented and verified
- ‚úÖ >95% SSOT consistency maintained
- ‚úÖ 100% contract compliance
- ‚úÖ All acceptance criteria satisfied
- ‚úÖ Quality gates consistently passing

### Continuous Quality
- üîÑ GraphRAG knowledge continuously updated
- üìä Real-time system health monitoring
- üîç Automated verification pipeline
- üìà Performance metrics tracking

---

## üìû Support

### Getting Help
- **SSOT Reference**: Check `demeter/core/ssot/` definitions
- **Verification Reports**: Review generated HTML reports
- **GraphRAG Query**: Use `/ssot-query` for context
- **Documentation**: See `demeter/docs/` for guides

### Best Practices
1. **Always start with `/ssot-query`**
2. **Generate code from SSOT context**
3. **Verify contracts before and after changes**
4. **Run verification scripts regularly**
5. **Keep GraphRAG knowledge updated**

---

**Project**: {{PROJECT_NAME}}
**Framework**: Demeter WAVIS v3.0.0
**Generated**: {{GENERATION_DATE}}

> Built with ‚ù§Ô∏è using SSOT-driven development, contract engineering, and AI assistance