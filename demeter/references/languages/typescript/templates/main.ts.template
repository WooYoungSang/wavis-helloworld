#!/usr/bin/env node

/**
 * {{PROJECT_NAME}} - {{PROJECT_DESCRIPTION}}
 * Generated by Demeter Template System
 */

import { createApp } from './app';
import { loadConfig } from './config';
import { setupLogging } from './logging';

interface Config {
  port: number;
  debug: boolean;
  version: string;
}

class Application {
  private config: Config;

  constructor(config: Config) {
    this.config = config;
  }

  async start(): Promise<void> {
    console.log(`ðŸŒ¾ ${this.config.version} - Starting...`);

    // TODO: Implement core business logic (FR-009)
    // This should be implemented according to SSOT requirements

    await this.run();
  }

  private async run(): Promise<void> {
    console.log(`Application running on port ${this.config.port}`);

    // Application main logic would go here
    await new Promise(resolve => setTimeout(resolve, 1000)); // Placeholder

    console.log('Application stopped gracefully');
  }

  async shutdown(): Promise<void> {
    console.log('Shutting down application...');
    // Cleanup resources here
  }
}

async function loadAppConfig(): Promise<Config> {
  // TODO: Implement configuration loading (FR-001)
  // This should be implemented according to SSOT requirements
  return {
    port: 3000,
    debug: false,
    version: '0.1.0',
  };
}

async function main(): Promise<void> {
  try {
    // Load configuration
    const config = await loadAppConfig();

    // Setup logging
    setupLogging(config.debug);

    // Create and start application
    const app = new Application(config);

    // Handle graceful shutdown
    process.on('SIGINT', async () => {
      console.log('Received SIGINT, shutting down gracefully');
      await app.shutdown();
      process.exit(0);
    });

    process.on('SIGTERM', async () => {
      console.log('Received SIGTERM, shutting down gracefully');
      await app.shutdown();
      process.exit(0);
    });

    await app.start();

  } catch (error) {
    console.error('Application error:', error);
    process.exit(1);
  }
}

// Start the application
if (require.main === module) {
  main().catch((error) => {
    console.error('Fatal error:', error);
    process.exit(1);
  });
}

export { Application };