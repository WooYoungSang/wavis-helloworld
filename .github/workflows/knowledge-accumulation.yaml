name: Knowledge Accumulation Pipeline

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

  workflow_dispatch:
    inputs:
      analysis_days:
        description: 'Number of days to analyze'
        required: false
        default: '7'
      force_recommendations:
        description: 'Force generate new recommendations'
        required: false
        default: 'false'

env:
  PYTHON_VERSION: '3.9'

jobs:
  analyze-patterns:
    name: Pattern Analysis
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need full history for pattern analysis

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyyaml

    - name: Analyze Recent Changes
      run: |
        DAYS="${{ github.event.inputs.analysis_days || '7' }}"
        echo "Analyzing code changes from last $DAYS days..."
        python3 demeter/core/ssot/graphrag/feedback/learning-engine.py --analyze-recent --days $DAYS

    - name: Upload Pattern Analysis
      uses: actions/upload-artifact@v3
      with:
        name: pattern-analysis
        path: demeter/core/ssot/graphrag/knowledge/
        retention-days: 90

  generate-recommendations:
    name: Generate SSOT Recommendations
    runs-on: ubuntu-latest
    needs: analyze-patterns

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyyaml

    - name: Download Pattern Analysis
      uses: actions/download-artifact@v3
      with:
        name: pattern-analysis
        path: demeter/core/ssot/graphrag/knowledge/

    - name: Generate Recommendations
      run: |
        echo "Generating SSOT recommendations from accumulated knowledge..."
        python3 demeter/core/ssot/graphrag/feedback/learning-engine.py --generate-recommendations

    - name: Upload Recommendations
      uses: actions/upload-artifact@v3
      with:
        name: ssot-recommendations
        path: demeter/core/ssot/graphrag/knowledge/ssot-recommendations.yaml
        retention-days: 90

  sync-knowledge:
    name: Sync Knowledge to GraphRAG
    runs-on: ubuntu-latest
    needs: [analyze-patterns, generate-recommendations]
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyyaml

    - name: Download All Artifacts
      uses: actions/download-artifact@v3
      with:
        path: ./artifacts

    - name: Restore Knowledge Files
      run: |
        cp -r ./artifacts/pattern-analysis/* demeter/core/ssot/graphrag/knowledge/ || true
        cp ./artifacts/ssot-recommendations/ssot-recommendations.yaml demeter/core/ssot/graphrag/knowledge/ || true

    - name: Run Knowledge Sync
      run: |
        echo "Syncing accumulated knowledge to GraphRAG..."
        python3 demeter/core/ssot/graphrag/sync/sync-engine.py --full-sync

    - name: Commit Knowledge Updates
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action - Knowledge Accumulation"

        if [ -n "$(git status --porcelain)" ]; then
          git add demeter/core/ssot/graphrag/knowledge/
          git commit -m "🧠 Auto-accumulate knowledge from recent changes

          📊 Pattern analysis and SSOT recommendations updated
          🔄 GraphRAG synchronized with latest knowledge

          🤖 Generated with Claude Code

          Co-Authored-By: Claude <noreply@anthropic.com>" || exit 0
          git push
        else
          echo "No knowledge changes to commit"
        fi

  create-improvement-issue:
    name: Create Improvement Issue
    runs-on: ubuntu-latest
    needs: generate-recommendations
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Download Recommendations
      uses: actions/download-artifact@v3
      with:
        name: ssot-recommendations
        path: ./recommendations

    - name: Parse Recommendations
      id: parse-recs
      run: |
        if [ -f "./recommendations/ssot-recommendations.yaml" ]; then
          echo "Recommendations file found, parsing..."
          python3 -c "
          import yaml
          import json

          with open('./recommendations/ssot-recommendations.yaml', 'r') as f:
              data = yaml.safe_load(f)

          if data:
              total_recs = 0
              for category, items in data.items():
                  if isinstance(items, list):
                      total_recs += len(items)

              print(f'has_recommendations=true')
              print(f'total_recommendations={total_recs}')
          else:
              print(f'has_recommendations=false')
              print(f'total_recommendations=0')
          " >> $GITHUB_OUTPUT
        else
          echo "has_recommendations=false" >> $GITHUB_OUTPUT
          echo "total_recommendations=0" >> $GITHUB_OUTPUT
        fi

    - name: Create Improvement Issue
      if: steps.parse-recs.outputs.has_recommendations == 'true' && steps.parse-recs.outputs.total_recommendations > '0'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const yaml = require('yaml');

          // Read recommendations
          let recommendations = {};
          try {
            const content = fs.readFileSync('./recommendations/ssot-recommendations.yaml', 'utf8');
            recommendations = yaml.parse(content);
          } catch (error) {
            console.log('Error reading recommendations:', error);
            return;
          }

          // Format recommendations for issue
          let issueBody = `## 🧠 AI-Generated SSOT Improvement Recommendations

          Based on recent code changes and pattern analysis, here are the recommended improvements to the SSOT system:

          `;

          for (const [category, items] of Object.entries(recommendations)) {
            if (Array.isArray(items) && items.length > 0) {
              issueBody += `### ${category.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase())}

          `;
              items.forEach((item, index) => {
                issueBody += `${index + 1}. **${item.title || 'Recommendation'}**
             - Description: ${item.description || 'No description'}
             - Priority: ${item.priority || 'Medium'}
             - Source: ${item.source || 'Pattern analysis'}

          `;
              });
            }
          }

          issueBody += `
          ## 📊 Analysis Details

          - **Generated**: ${recommendations.generation_timestamp || 'Unknown'}
          - **Total Recommendations**: ${{ steps.parse-recs.outputs.total_recommendations }}
          - **Analysis Period**: Last 7 days of commits

          ## 🎯 Next Steps

          1. Review each recommendation for feasibility
          2. Prioritize based on impact and effort
          3. Create specific implementation tasks
          4. Update SSOT definitions accordingly

          ---

          🤖 *This issue was automatically generated by the Knowledge Accumulation Pipeline*
          `;

          // Check if similar issue already exists
          const existingIssues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: ['ssot-improvements', 'ai-generated'],
            state: 'open'
          });

          if (existingIssues.data.length === 0) {
            // Create new issue
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🧠 SSOT Improvement Recommendations - ${new Date().toISOString().split('T')[0]}`,
              body: issueBody,
              labels: ['ssot-improvements', 'ai-generated', 'enhancement']
            });

            console.log('Created new SSOT improvement issue');
          } else {
            console.log('SSOT improvement issue already exists, skipping creation');
          }

  quality-metrics:
    name: Update Quality Metrics
    runs-on: ubuntu-latest
    needs: [sync-knowledge]
    if: always() && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyyaml

    - name: Update Quality Metrics
      run: |
        echo "Updating quality metrics based on knowledge accumulation..."

        # Run SSOT verification to get current metrics
        python3 demeter/core/ssot/verification/verify-ssot.py

        # Generate traceability matrix
        python3 demeter/core/ssot/traceability/matrix-generator.py --html-report traceability-report.html

        # Calculate knowledge growth metrics
        python3 -c "
        import yaml
        import json
        from pathlib import Path
        from datetime import datetime

        knowledge_dir = Path('demeter/core/ssot/graphrag/knowledge')
        metrics = {
            'patterns_count': 0,
            'decisions_count': 0,
            'lessons_count': 0,
            'last_updated': datetime.now().isoformat()
        }

        # Count patterns
        patterns_file = knowledge_dir / 'patterns.yaml'
        if patterns_file.exists():
            with open(patterns_file, 'r') as f:
                patterns = yaml.safe_load(f) or {}
                metrics['patterns_count'] = len(patterns)

        # Count decisions
        decisions_file = knowledge_dir / 'decisions.yaml'
        if decisions_file.exists():
            with open(decisions_file, 'r') as f:
                decisions = yaml.safe_load(f) or {}
                metrics['decisions_count'] = len(decisions)

        # Count lessons
        lessons_file = knowledge_dir / 'lessons.yaml'
        if lessons_file.exists():
            with open(lessons_file, 'r') as f:
                lessons = yaml.safe_load(f) or {}
                metrics['lessons_count'] = len(lessons)

        # Save metrics
        with open('knowledge-metrics.json', 'w') as f:
            json.dump(metrics, f, indent=2)

        print(f'Knowledge Metrics Updated:')
        print(f'  Patterns: {metrics[\"patterns_count\"]}')
        print(f'  Decisions: {metrics[\"decisions_count\"]}')
        print(f'  Lessons: {metrics[\"lessons_count\"]}')
        "

    - name: Upload Quality Metrics
      uses: actions/upload-artifact@v3
      with:
        name: quality-metrics
        path: |
          ssot-verification.html
          traceability-report.html
          knowledge-metrics.json
        retention-days: 90

  notify-completion:
    name: Notify Completion
    runs-on: ubuntu-latest
    needs: [analyze-patterns, generate-recommendations, sync-knowledge, quality-metrics]
    if: always()

    steps:
    - name: Summary Report
      run: |
        echo "📊 Knowledge Accumulation Pipeline Summary"
        echo "========================================"
        echo "Pattern Analysis: ${{ needs.analyze-patterns.result }}"
        echo "Recommendations: ${{ needs.generate-recommendations.result }}"
        echo "Knowledge Sync: ${{ needs.sync-knowledge.result }}"
        echo "Quality Metrics: ${{ needs.quality-metrics.result }}"

        if [ "${{ needs.analyze-patterns.result }}" == "success" ] && \
           [ "${{ needs.generate-recommendations.result }}" == "success" ]; then
          echo "✅ Knowledge accumulation completed successfully!"
        else
          echo "⚠️ Some components of knowledge accumulation failed"
        fi