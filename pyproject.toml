[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "demeter-wavis-framework"
version = "1.0.0"
description = "Complete AI-driven development framework with SSOT-based requirements management and contract engineering"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "WAVIS Alchemy", email = "info@wavis-alchemy.com"},
]
maintainers = [
    {name = "Demeter Framework Team", email = "demeter@wavis-alchemy.com"},
]
keywords = [
    "ai-driven-development",
    "ssot",
    "contract-engineering",
    "claude-code",
    "graphrag",
    "development-framework",
    "requirements-management",
    "automated-testing",
    "quality-assurance",
    "project-template",
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Code Generators",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Software Development :: Testing",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
    "Environment :: Console",
    "Environment :: Web Environment",
]
requires-python = ">=3.9"
dependencies = [
    "pyyaml>=6.0.0",
    "jinja2>=3.1.0",
    "click>=8.1.0",
    "rich>=13.7.0",
    "fastapi>=0.104.0",
    "uvicorn>=0.24.0",
    "pydantic>=2.0.0",
    "httpx>=0.25.0",
    "aiofiles>=23.0.0",
    "python-multipart>=0.0.6",
]

[project.optional-dependencies]
# AI and GraphRAG dependencies
ai = [
    "openai>=1.3.0",
    "anthropic>=0.7.0",
    "tiktoken>=0.5.0",
]
graphrag = [
    "sentence-transformers>=2.2.0",
    "chromadb>=0.4.0",
    "networkx>=3.1.0",
    "scikit-learn>=1.3.0",
]
# Development dependencies
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.9.0",
    "flake8>=6.1.0",
    "mypy>=1.6.0",
    "pre-commit>=3.4.0",
    "sphinx>=7.2.0",
    "sphinx-rtd-theme>=1.3.0",
]
# Database dependencies
database = [
    "sqlalchemy>=2.0.0",
    "alembic>=1.12.0",
    "psycopg2-binary>=2.9.0",
    "redis>=5.0.0",
]
# Cloud dependencies
cloud = [
    "boto3>=1.29.0",
    "azure-identity>=1.14.0",
    "google-cloud-storage>=2.10.0",
]
# Monitoring dependencies
monitoring = [
    "prometheus-client>=0.18.0",
    "opentelemetry-api>=1.21.0",
    "opentelemetry-sdk>=1.21.0",
    "structlog>=23.2.0",
]
# All optional dependencies
all = [
    "demeter-wavis-framework[ai,graphrag,dev,database,cloud,monitoring]"
]

[project.urls]
Homepage = "https://github.com/wavis-alchemy/demeter"
Documentation = "https://github.com/wavis-alchemy/demeter/wiki"
Repository = "https://github.com/wavis-alchemy/demeter.git"
"Bug Tracker" = "https://github.com/wavis-alchemy/demeter/issues"
Changelog = "https://github.com/wavis-alchemy/demeter/blob/main/CHANGELOG.md"
Funding = "https://github.com/sponsors/wavis-alchemy"

[project.scripts]
demeter = "demeter.cli.main:main"
demeter-quick-start = "demeter.setup.quick_start:main"
demeter-dev-cycle = "demeter.ai.development_cycle:main"
demeter-copy-template = "demeter.scripts.copy_template:main"
demeter-verify = "demeter.verification.verify_all:main"

[project.gui-scripts]
demeter-dashboard = "demeter.dashboard.app:main"

[tool.setuptools]
packages = ["demeter"]
include-package-data = true

[tool.setuptools.package-data]
demeter = [
    "**/*.yaml",
    "**/*.yml",
    "**/*.json",
    "**/*.md",
    "**/*.txt",
    "**/*.sh",
    "**/*.jinja2",
    "**/*.j2",
    "templates/**/*",
    "examples/**/*",
    "docs/**/*",
]

[tool.setuptools.exclude-package-data]
"*" = [
    "tests/*",
    "*.pyc",
    "__pycache__/*",
    "*.log",
    ".DS_Store",
    "Thumbs.db",
]

# Tool configurations

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["demeter"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "yaml.*",
    "jinja2.*",
    "click.*",
    "rich.*",
    "fastapi.*",
    "uvicorn.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_functions = ["test_*"]
python_classes = ["Test*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=demeter",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "contract: Contract validation tests",
    "performance: Performance tests",
    "ai: AI integration tests",
    "slow: Slow running tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
source = ["demeter"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.flake8]
max-line-length = 88
select = ["C", "E", "F", "W", "B", "B950"]
ignore = [
    "E203",  # whitespace before ':'
    "E501",  # line too long
    "W503",  # line break before binary operator
]
exclude = [
    ".git",
    "__pycache__",
    "docs/source/conf.py",
    "old",
    "build",
    "dist",
    ".venv",
    "venv",
    ".tox",
    ".eggs",
    "*.egg",
]

# Demeter-specific configuration

[tool.demeter]
framework_version = "1.0.0"
schema_version = "1.0.0"

[tool.demeter.paths]
ssot = "demeter/core/ssot/framework-requirements.yaml"
contracts = "demeter/core/ssot/contracts/"
graphrag = "demeter/core/ssot/graphrag/"
templates = "demeter/templates/"
examples = "demeter/examples/"

[tool.demeter.features]
ai_integration = true
claude_code = true
ssot_driven = true
contract_engineering = true
graphrag = true
multi_tech_stack = true
quality_gates = true

[tool.demeter.tech_stacks]
supported = [
    "python-fastapi",
    "typescript-nextjs",
    "go-gin",
    "java-spring",
]
default = "agnostic"

[tool.demeter.quality]
ssot_consistency_threshold = 95
contract_compliance_threshold = 100
test_coverage_foundation = 80
test_coverage_business = 60

[tool.demeter.ai]
default_provider = "openai"
model = "gpt-4o-mini"
embedding_model = "text-embedding-3-small"
chunk_size = 1200
chunk_overlap = 100

[tool.demeter.extensions]
domain = [
    "e-commerce",
    "fintech",
    "healthcare",
]
features = [
    "ai-ml",
    "blockchain",
    "iot",
    "streaming",
]
compliance = [
    "gdpr",
    "hipaa",
    "pci-dss",
]